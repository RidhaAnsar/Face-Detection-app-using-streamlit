# -*- coding: utf-8 -*-
"""Face_detection_using_openCV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/RidhaAnsar/Face-Detection-Using-Opencv/blob/main/Face_detection_using_openCV.ipynb
"""

import streamlit as st
from PIL import Image

## Using a pre trained tranformer from openCV
import cv2
face_cascade=cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

import numpy as np

st.markdown(
    """
    <style>
    .stApp {
        background-color: #ed91d3;
    }
    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
    .stApp {
        font-family: 'Roboto', sans-serif;
    }
     .css-1x8cf1d {  /* General input and select box class */
        background-color: #ffffff;
        color: #333333;
        border: 1px solid #ff6f61;
        padding: 8px;
        border-radius: 4px;
    }
 .card {
        background-color: #f7f9fc;
        padding: 20px;
        margin: 20px 0;
        border-radius: 8px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    }
    /* Focus state (when input is selected) */
    .css-1x8cf1d:focus {
        border-color: #ff4f41; /* Darker coral */
        box-shadow: 0 0 8px rgba(255, 111, 97, 0.3);
    }

    /* Customizing headers */
    h1, h2, h3, h4, h5, h6 {
        color: #4b4b4b; /* Dark gray */
        font-weight: 700;
    }
    .stButton>button {
        background-color: #ff6f61; /* Coral */
        color: white;
        border: none;
        padding: 8px 16px;
        font-size: 16px;
        border-radius: 8px; /* Rounded corners */
        transition: 0.3s;
    }

    /* Hover effect for buttons */
    .stButton>button:hover {
        background-color: #ff4f41; /* Darker coral */
        color: #f0f2f6;
    }
    </style>
    """,
    unsafe_allow_html=True
)

st.title("Face Detection App")
st.write("Upload an image and detect faces in real-time.")
uploaded_file=st.file_uploader("choose an image...", type=["jpeg", "jpg", "png"])
if uploaded_file is not None:

    image = np.array(Image.open(uploaded_file).convert('RGB'))
    st.image(image, caption="Uploaded Image", use_column_width=True)

faces = []

if st.button("Detect Faces"):

        gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.1, 4)

for (x, y, w, h) in faces:
            cv2.rectangle(image, (x, y), (x+w, y+h), (255, 0, 0), 2)

            st.image(image, caption="Detected Faces", use_column_width=True)